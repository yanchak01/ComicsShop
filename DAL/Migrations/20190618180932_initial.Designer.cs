// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DAL.Migrations
{
    [DbContext(typeof(ComDbContext))]
    [Migration("20190618180932_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("DAL.DBModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.DBModels.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ComicsId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ComicsId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("DAL.DBModels.ArtistComics", b =>
                {
                    b.Property<Guid>("ArtistId");

                    b.Property<Guid>("ComicsId");

                    b.HasKey("ArtistId", "ComicsId");

                    b.HasIndex("ComicsId");

                    b.ToTable("ArtistComics");
                });

            modelBuilder.Entity("DAL.DBModels.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("DAL.DBModels.AuthorComics", b =>
                {
                    b.Property<Guid>("AuthorId");

                    b.Property<Guid>("ComicsId");

                    b.HasKey("AuthorId", "ComicsId");

                    b.HasIndex("ComicsId");

                    b.ToTable("AuthorComics");
                });

            modelBuilder.Entity("DAL.DBModels.Comics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("NumbersOfPages");

                    b.Property<int>("Price");

                    b.Property<string>("Seria");

                    b.HasKey("Id");

                    b.ToTable("Comicses");
                });

            modelBuilder.Entity("DAL.DBModels.Corrector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Correctors");
                });

            modelBuilder.Entity("DAL.DBModels.CorrectorComics", b =>
                {
                    b.Property<Guid>("CorrectorId");

                    b.Property<Guid>("ComicsId");

                    b.HasKey("CorrectorId", "ComicsId");

                    b.HasIndex("ComicsId");

                    b.ToTable("CorrectorComics");
                });

            modelBuilder.Entity("DAL.DBModels.Illustrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Illustrators");
                });

            modelBuilder.Entity("DAL.DBModels.IllustratorComics", b =>
                {
                    b.Property<Guid>("ComicsId");

                    b.Property<Guid>("IllustratorId");

                    b.HasKey("ComicsId", "IllustratorId");

                    b.HasIndex("IllustratorId");

                    b.ToTable("IllustratorComics");
                });

            modelBuilder.Entity("DAL.DBModels.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("DAL.DBModels.PublisherComics", b =>
                {
                    b.Property<Guid>("ComicsId");

                    b.Property<Guid>("PublisherId");

                    b.HasKey("ComicsId", "PublisherId");

                    b.HasIndex("PublisherId");

                    b.ToTable("PublisherComics");
                });

            modelBuilder.Entity("DAL.DBModels.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DAL.DBModels.TagComics", b =>
                {
                    b.Property<Guid>("ComicsId");

                    b.Property<Guid>("TagId");

                    b.HasKey("ComicsId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("TagComics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.DBModels.Artist", b =>
                {
                    b.HasOne("DAL.DBModels.Comics", "Comics")
                        .WithMany()
                        .HasForeignKey("ComicsId");
                });

            modelBuilder.Entity("DAL.DBModels.ArtistComics", b =>
                {
                    b.HasOne("DAL.DBModels.Artist", "Artist")
                        .WithMany("ArtistComicses")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DBModels.Comics", "Comics")
                        .WithMany("ArtistComicses")
                        .HasForeignKey("ComicsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DBModels.AuthorComics", b =>
                {
                    b.HasOne("DAL.DBModels.Author", "Author")
                        .WithMany("AuthorComicses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DBModels.Comics", "Comics")
                        .WithMany("AuthorComicses")
                        .HasForeignKey("ComicsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DBModels.CorrectorComics", b =>
                {
                    b.HasOne("DAL.DBModels.Comics", "Comics")
                        .WithMany("CorrectorsComicses")
                        .HasForeignKey("ComicsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DBModels.Corrector", "Corrector")
                        .WithMany("CorrectorsComicses")
                        .HasForeignKey("CorrectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DBModels.IllustratorComics", b =>
                {
                    b.HasOne("DAL.DBModels.Comics", "Comics")
                        .WithMany("IllustratorComicses")
                        .HasForeignKey("ComicsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DBModels.Illustrator", "Illustrator")
                        .WithMany("IllustratorComicses")
                        .HasForeignKey("IllustratorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DBModels.PublisherComics", b =>
                {
                    b.HasOne("DAL.DBModels.Comics", "Comics")
                        .WithMany("PublisherComicses")
                        .HasForeignKey("ComicsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DBModels.Publisher", "Publisher")
                        .WithMany("PublisherComicses")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.DBModels.TagComics", b =>
                {
                    b.HasOne("DAL.DBModels.Comics", "Comics")
                        .WithMany("TagComicses")
                        .HasForeignKey("ComicsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DBModels.Tag", "Tag")
                        .WithMany("TagComicses")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.DBModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.DBModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.DBModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.DBModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
